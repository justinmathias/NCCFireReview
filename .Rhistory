}
dms.to.dd("34 56 09", "34 34 34")
dms.to.dd("34 56 09")
dms.to.dd("67 46 0", "29 35 0")
dms.to.dd("63 55 0", "145 44 0")
dms.to.dd("50 12 46.5", "127 15 57")
dms.to.dd("106 55 27","36 20 17")
dms.to.dd("38 47 40", "87 16 47")
dms.to.dd("41 15 19", "1 16 53")
dms.to.dd("-71 22 18.5", "41 08 45.7")
-
-
dms.to.dd("-71 22 18.5", "-41 08 45.7")
dms.to.dd("-41 08 45.7", "-71 22 18.5")
dms.to.dd("-41 11 58", "-71 49 42.9")
dms.to.dd("39 40 0", "-1 55 0")
dms.to.dd("38 44 56" "0 2 32")
dms.to.dd("38 44 56", "0 2 32")
dms.to.dd("38 44 0", "2 22 58")
dms.to.dd("61 34 55", "-117 11 55")
if (is.null(dms2) != TRUE) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
dms2 <- conv_unit(dd2, from = "dec_deg", to = "deg_min_sec")
paste(dms, dms2, sep = ",")
}
dd.to.dms <- function(dd, dd2)
}
}
}
if (is.null(dms2) != TRUE) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
dms2 <- conv_unit(dd2, from = "dec_deg", to = "deg_min_sec")
paste(dms, dms2, sep = ",")
} else if (is.null(dms2) == TRUE) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
return(dms)
}
if (is.null(dd2) != TRUE) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
dms2 <- conv_unit(dd2, from = "dec_deg", to = "deg_min_sec")
paste(dms, dms2, sep = ",")
} else if (is.null(dd2) == TRUE) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
return(dms)
}
}
dd.to.dms <- function(dd, dd2 = NULL) {
if (is.null(dd2) != TRUE) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
dms2 <- conv_unit(dd2, from = "dec_deg", to = "deg_min_sec")
paste(dd, dd2, sep = ",")
} else if (is.null(dms2) == TRUE) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
dd
}
}
dd.to.dms(34.56908)
dd.to.dms(34.56908, 78.9093)
dd.to.dms <- function(dd, dd2 = NULL) {
if (is.null(dd2) != TRUE) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
dms2 <- conv_unit(dd2, from = "dec_deg", to = "deg_min_sec")
paste(dd, dd2, sep = ",")
} else if (is.null(dms2) == TRUE) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
dms
}
}
dd.to.dms(34.56908)
dd.to.dms <- function(dd, dd2 = NULL) {
if (is.null(dd2) != TRUE) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
dms2 <- conv_unit(dd2, from = "dec_deg", to = "deg_min_sec")
paste(dd, dd2, sep = ",")
} else if (is.null(dd2) == TRUE) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
dms
}
}
dd.to.dms(34.56908)
dd.to.dms(34.56908, 78.9093)
dd.to.dms <- function(dd, dd2) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
return(dms)
}
dd.to.dms(34.56908)
dms.to.dd("45 24 0", "-93 12 0")
# Literature review datasheet metadata extraction -------------------------
#Read files, starting with row three, where actual
belowground <- read.xlsx("/Users/justinmathias/Downloads/LitSearch_Revised_Final_DataExtration_V1.xlsx",
sheet = "Belowground",
startRow = 3)
belowground$`Lat/Lon`
#Create unique columns for Latitude and Longitude
belowground |> sep.coords(`Lat/Lon`)
rlang::last_error()
#Create unique columns for Latitude and Longitude
belowground |> sep.coords(`Lat/Lon`, "Lat")
# Literature review datasheet metadata extraction -------------------------
#Read files, starting with row three, where actual
belowground <- read.xlsx("/Users/justinmathias/Downloads/LitSearch_Revised_Final_DataExtration_V1.xlsx",
sheet = "Belowground",
startRow = 3)
colnames(belowground)
# Literature review datasheet metadata extraction -------------------------
#Read files, starting with row three, where actual
belowground <- read.xlsx("/Users/justinmathias/Downloads/LitSearch_Revised_Final_DataExtration_V1.xlsx",
sheet = "Belowground",
startRow = 3)
colnames(belowground)
#Create unique columns for Latitude and Longitude
belowground |> sep.coords(LatLon, "Lat")
#Create unique columns for Latitude and Longitude
belowground |> sep.coords("LatLon", "Lat")
#Create unique columns for Latitude and Longitude
belowground |> separate(LatLon)
#Create unique columns for Latitude and Longitude
belowground |> select(LatLon)
#Create unique columns for Latitude and Longitude
belowground |> select(LatLon) |> drop_na()
#Create unique columns for Latitude and Longitude
belowground |> select(LatLon) |> drop_na() |> separate()
#Create unique columns for Latitude and Longitude
belowground |> select(LatLon) |> drop_na() |> separate(LatLon)
#Create unique columns for Latitude and Longitude
belowground |> select(LatLon) |> drop_na() |> sep.coords(LatLon)
#Create unique columns for Latitude and Longitude
belowground |> select(LatLon) |> drop_na()
#Create unique columns for Latitude and Longitude
belowground |> select(LatLon) |> drop_na() group_by(LatLon) |> filter(row_number() == 1)
#Create unique columns for Latitude and Longitude
belowground |> select(LatLon) |> drop_na() |> group_by(LatLon) |> filter(row_number() == 1)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record
filter(row_number() == 1)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
sep.coords(LatLon)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
mutate(Lat = sep.coords(LatLon, "Lat"))
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c("Lat", "Lon"))
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c("Lat", "Lon"), sep = "\\/|\\,", convert = TRUE)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c("Lat"), sep = "\\/|\\,", convert = TRUE)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c("Lon"), sep = "\\/|\\,", convert = TRUE)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c("Lat"), sep = "\\/|\\,", convert = TRUE)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c("Lon"), sep = "\\/|\\,", convert = TRUE)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c("Lat", "Lon"), sep = "\\/|\\,", convert = TRUE)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c("Lat", "Lon"), sep = "\\/|\\,", convert = TRUE) |>
mutate(Lon = as.numeric(Lon))
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c("Lat", "Lon"), sep = "\\/|\\,", convert = TRUE) #|>
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c("Lat", "Lon"), sep = "\\/|\\,", convert = TRUE) |>
mutate(Lon = as.numeric(Lon))
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c(NA, "Lon"), sep = "\\/|\\,", convert = TRUE) |>
mutate(Lon = as.numeric(Lon))
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c(NA, "Lon"), sep = "\\/|\\,") |>
mutate(Lon = as.numeric(Lon))
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c(NA, "Lon"), sep = "\\/|\\,")
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c(NA, "Lon"), sep = "\\/|\\,") |>
print(n = 150)
# Literature review datasheet metadata extraction -------------------------
#Read files, starting with row three, where actual
belowground <- read.xlsx("/Users/justinmathias/Downloads/LitSearch_Revised_Final_DataExtration_V1.xlsx",
sheet = "Belowground",
startRow = 3)
colnames(belowground)
colnames(belowground)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c(NA, "Lon"), sep = "\\/|\\,") |>
print(n = 150)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, into = c(NA, "Lon"), sep = "\\/|\\,", convert = TRUE) |>
print(n = 150)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
separate(LatLon, sep = "\\/|\\,", convert = TRUE) |>
print(n = 150)
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
sep.coords(LatLon) |>
print(n = 150)
?readOGR
??readOGR
install.packages("rgdal")
libraries(c("terra", "tidyverse", "ggsci", "ggthemes", "RColorBrewer", "measurements", "stringr", "rayshader", "egg", "rgdal"))
##Belowground map of study locations----
biomes <- readOGR("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/Nature Climate Change review/Ecoregions2017/Ecoregions2017.shp") #World biomes from: Dinerstein et al., 2017, An Ecoregion-Based Approach to Protecting Half the Terrestrial Realm
#Create unique columns for Latitude and Longitude
belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
sep.coords(LatLon) |>
print(n = 150)
#Create unique columns for Latitude and Longitude
belowground <- belowground |>
select(LatLon) |> #Select LatLon column
drop_na() |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
sep.coords(LatLon)
View(belowground)
# Literature review datasheet metadata extraction -------------------------
#Read files, starting with row three, where actual
belowground <- read.xlsx("/Users/justinmathias/Downloads/LitSearch_Revised_Final_DataExtration_V1.xlsx",
sheet = "Belowground",
startRow = 3)
colnames(belowground)
#Create unique columns for Latitude and Longitude
belowground <- belowground |>
select(LatLon) |> #Select LatLon column
drop_na(LatLon) |> #Remove NA values
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
sep.coords(LatLon)
View(belowground)
# Literature review datasheet metadata extraction -------------------------
#Read files, starting with row three, where actual
belowground <- read.xlsx("/Users/justinmathias/Downloads/LitSearch_Revised_Final_DataExtration_V1.xlsx",
sheet = "Belowground",
startRow = 3)
belowground <- belowground |>
select(LatLon) |> #Select LatLon column
drop_na(LatLon)
View(belowground)
# Literature review datasheet metadata extraction -------------------------
#Read files, starting with row three, where actual
belowground <- read.xlsx("/Users/justinmathias/Downloads/LitSearch_Revised_Final_DataExtration_V1.xlsx",
sheet = "Belowground",
startRow = 3)
belowground <- belowground |>
drop_na(LatLon)
View(belowground)
#Create unique columns for Latitude and Longitude
belowground <- belowground |>
drop_na(LatLon) |> #Remove NA values only for LatLon column
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
sep.coords(LatLon)
#Create unique columns for Latitude and Longitude
belowground <- belowground |>
drop_na(LatLon) |> #Remove NA values only for LatLon column
select(LatLon) |>
group_by(LatLon) |> #Group by unique LatLon and only include one record per site
filter(row_number() == 1) |>
sep.coords(LatLon)
##Belowground map of study locations----
biomes <- readOGR("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/Nature Climate Change review/Ecoregions2017/Ecoregions2017.shp") #World biomes from: Dinerstein et al., 2017, An Ecoregion-Based Approach to Protecting Half the Terrestrial Realm
#Create a new dataframe, coords, so we can extract data from the CRU dataset for each year
coords <- data.frame(belowground$Lon, extract.coords$Lat)
#Create a new dataframe, coords, so we can extract data from the CRU dataset for each year
coords <- data.frame(belowground$Lon, belowground$Lat)
coords.sp <- SpatialPoints(coords) #Coords need to be LongLat
proj4string(coords.sp) = proj4string(biomes) #Need to make sure coordinates match.
#Extract biome information.
belowground <- cbind(belowground, over(coords.sp, biomes)$BIOME_NAME)
#Rename biome column
names(belowground)[names(belowground) == "over(coords.sp, biomes)$BIOME_NAME"] <- "Biome"
####Map of belowground papers----
#Figure 1a, Create map of study locations, circle size is number of trees#
ggplot() + #Plot
borders("world", colour = "gray40", fill = "gray95") +
theme_few() +
coord_fixed(1.2) +
geom_point(aes(x = Lon, y = Lat, color = Biome),
data = belowground,
# color = 'blue',
alpha = 0.65) +
scale_size_continuous(range = c(1, 8),
breaks = c(5, 10, 15)) +
labs(size = '# Trees') +
theme(legend.position = c(0.11 , 0.35),
legend.title = element_text(size = 11, family = "Arial"),
legend.text = element_text(size = 11, family = "Arial"),
legend.background=element_blank(),
axis.title.x = element_text(color = "black", size = 17, family = "Arial"), #x-axis title (Year)
axis.title.y = element_text(color = "black", size = 17, family = "Arial"), #y-axis title (iWUE)
axis.text = element_text(color = "black", size = 16, family = "Arial"),
panel.border = element_rect(colour = "black", fill=NA, size=.9),
plot.tag = element_text(family = "Arial", size = 18, face = "bold")) +
labs(tag = "A") +
# scale_color_npg() +
# scale_color_manual(values = c("#8491B4FF","#FFB154FF", "#B09C85FF", "#E64B35FF","#00A087FF","#3C5488FF","#4DBBD5FF","#91D1C2FF","#DC0000FF","#7E6148FF")) +
xlab("Longitude") +
ylab("Latitude") +
guides(color = FALSE)
####Map of belowground papers----
#Figure 1a, Create map of study locations, circle size is number of trees#
ggplot() + #Plot
borders("world", colour = "gray40", fill = "gray95") +
theme_few() +
coord_fixed(1.2) +
geom_point(aes(x = Lon, y = Lat, color = Biome),
data = belowground,
# color = 'blue',
alpha = 0.65) +
scale_size_continuous(range = c(1, 8),
breaks = c(5, 10, 15)) +
labs(size = '# Trees') +
theme(legend.title = element_text(size = 11, family = "Arial"),
legend.text = element_text(size = 11, family = "Arial"),
legend.background=element_blank(),
axis.title.x = element_text(color = "black", size = 17, family = "Arial"), #x-axis title (Year)
axis.title.y = element_text(color = "black", size = 17, family = "Arial"), #y-axis title (iWUE)
axis.text = element_text(color = "black", size = 16, family = "Arial"),
panel.border = element_rect(colour = "black", fill=NA, size=.9),
plot.tag = element_text(family = "Arial", size = 18, face = "bold")) +
labs(tag = "A") +
# scale_color_npg() +
# scale_color_manual(values = c("#8491B4FF","#FFB154FF", "#B09C85FF", "#E64B35FF","#00A087FF","#3C5488FF","#4DBBD5FF","#91D1C2FF","#DC0000FF","#7E6148FF")) +
xlab("Longitude") +
ylab("Latitude") +
guides(color = FALSE)
####Map of belowground papers----
#Figure 1a, Create map of study locations, circle size is number of trees#
ggplot() + #Plot
borders("world", colour = "gray40", fill = "gray95") +
theme_few() +
coord_fixed(1.2) +
geom_point(aes(x = Lon, y = Lat, color = Biome),
data = belowground,
# color = 'blue',
alpha = 0.65) +
scale_size_continuous(range = c(1, 8),
breaks = c(5, 10, 15)) +
labs(size = '# Trees') +
theme(legend.position = c(0.11 , 0.35),
legend.title = element_text(size = 11, family = "Arial"),
legend.text = element_text(size = 11, family = "Arial"),
legend.background=element_blank(),
axis.title.x = element_text(color = "black", size = 17, family = "Arial"), #x-axis title (Year)
axis.title.y = element_text(color = "black", size = 17, family = "Arial"), #y-axis title (iWUE)
axis.text = element_text(color = "black", size = 16, family = "Arial"),
panel.border = element_rect(colour = "black", fill=NA, size=.9),
plot.tag = element_text(family = "Arial", size = 18, face = "bold")) +
labs(tag = "A") +
# scale_color_npg() +
# scale_color_manual(values = c("#8491B4FF","#FFB154FF", "#B09C85FF", "#E64B35FF","#00A087FF","#3C5488FF","#4DBBD5FF","#91D1C2FF","#DC0000FF","#7E6148FF")) +
xlab("Longitude") +
ylab("Latitude") #+
####Map of belowground papers----
#Figure 1a, Create map of study locations, circle size is number of trees#
ggplot() + #Plot
borders("world", colour = "gray40", fill = "gray95") +
theme_few() +
coord_fixed(1.2) +
geom_point(aes(x = Lon, y = Lat, color = Biome),
data = belowground,
# color = 'blue',
alpha = 0.65) +
scale_size_continuous(range = c(1, 8),
breaks = c(5, 10, 15)) +
labs(size = '# Trees') +
theme(legend.title = element_text(size = 11, family = "Arial"),
legend.text = element_text(size = 11, family = "Arial"),
legend.background=element_blank(),
axis.title.x = element_text(color = "black", size = 17, family = "Arial"), #x-axis title (Year)
axis.title.y = element_text(color = "black", size = 17, family = "Arial"), #y-axis title (iWUE)
axis.text = element_text(color = "black", size = 16, family = "Arial"),
panel.border = element_rect(colour = "black", fill=NA, size=.9),
plot.tag = element_text(family = "Arial", size = 18, face = "bold")) +
labs(tag = "A") +
# scale_color_npg() +
# scale_color_manual(values = c("#8491B4FF","#FFB154FF", "#B09C85FF", "#E64B35FF","#00A087FF","#3C5488FF","#4DBBD5FF","#91D1C2FF","#DC0000FF","#7E6148FF")) +
xlab("Longitude") +
ylab("Latitude") #+
####Map of belowground papers----
#Figure 1a, Create map of study locations, circle size is number of trees#
ggplot() + #Plot
borders("world", colour = "gray40", fill = "gray95") +
theme_few() +
coord_fixed(1.2) +
geom_point(aes(x = Lon, y = Lat, color = Biome),
data = belowground,
# color = 'blue',
alpha = 0.65) +
scale_size_continuous(range = c(1, 8),
breaks = c(5, 10, 15)) +
labs(size = '# Trees') +
theme(legend.title = element_text(size = 11, family = "Arial"),
legend.text = element_text(size = 11, family = "Arial"),
legend.background=element_blank(),
axis.title.x = element_text(color = "black", size = 17, family = "Arial"), #x-axis title (Year)
axis.title.y = element_text(color = "black", size = 17, family = "Arial"), #y-axis title (iWUE)
axis.text = element_text(color = "black", size = 16, family = "Arial"),
panel.border = element_rect(colour = "black", fill=NA, size=.9),
plot.tag = element_text(family = "Arial", size = 18, face = "bold")) +
# scale_color_npg() +
# scale_color_manual(values = c("#8491B4FF","#FFB154FF", "#B09C85FF", "#E64B35FF","#00A087FF","#3C5488FF","#4DBBD5FF","#91D1C2FF","#DC0000FF","#7E6148FF")) +
xlab("Longitude") +
ylab("Latitude") #+
