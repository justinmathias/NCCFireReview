x <- data.frame(Value = #Create test data frame
c("5(78)",
"4 (56)",
"4 ± 56",
"4±56"))
sep.data(x, in_col = Value) #Test! Works on parentheses and plus/minus!
convertSoilC <- function(val, from, to) {
#We want all units to be in terms of carbon
if (grepl("C", from) == TRUE) { #If the units are already in terms of carbon, then do simple conversion
from1 <- stri_replace_all_regex(from,
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
to1 <- stri_replace_all_regex(to,
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(val, from1, to1) #Use function from measurements package for conversion
out
} else {
val1 <- val #NEED TO PUT MODIFIER HERE
from1 <- stri_replace_all_regex(from, #Otherwise
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
to1 <- stri_replace_all_regex(to,
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(val1, from1, to1) #Use function from measurements package for conversion
out
}
}
convertSoilC <- function(val, from, to) {
#We want all units to be in terms of carbon
if (grepl("C", from) == TRUE) { #If the units are already in terms of carbon, then do simple conversion
from1 <- stri_replace_all_regex(from,
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
to1 <- stri_replace_all_regex(to,
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(val, from1, to1) #Use function from measurements package for conversion
out
} else {
val1 <- val #NEED TO PUT MODIFIER HERE
from1 <- stri_replace_all_regex(from, #Otherwise
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
to1 <- stri_replace_all_regex(to,
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(val1, from1, to1) #Use function from measurements package for conversion
out*0.45
}
}
convertSoilC(1, "kg_per_m2", "g / m2")
convertSoilC(1, "kgC_per_m2", "g / m2")
convertSoilC(1, "kg_per_m2", "g / m2")
####Map of bmap papers----
bmap %>%
ggplot() + #Plot
borders("world", colour = "gray40", fill = "gray99") +
theme_article() +
coord_fixed(1.2) +
geom_point(aes(x = Lon, y = Lat, color = Biome),
alpha = 0.65,
size = 3) +
scale_size_continuous(range = c(1, 8),
breaks = c(5, 10, 15)) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 11, family = "Arial"),
legend.text = element_text(size = 11, family = "Arial"),
legend.background = element_blank(),
axis.title.x = element_text(
color = "black",
size = 17,
family = "Arial"
),
axis.title.y = element_text(
color = "black",
size = 17,
family = "Arial"
),
axis.text = element_text(
color = "black",
size = 16,
family = "Arial"
),
panel.border = element_rect(
colour = "black",
fill = NA,
size = .9
),
plot.tag = element_text(
family = "Arial",
size = 18,
face = "bold"
)
) +
xlab("Longitude") +
ylab("Latitude") +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 0.8), ncol = 2))
####Map of bmap papers----
ggplotly(bmap %>%
ggplot() + #Plot
borders("world", colour = "gray40", fill = "gray99") +
theme_article() +
coord_fixed(1.2) +
geom_point(aes(x = Lon, y = Lat, color = Biome),
alpha = 0.65,
size = 3) +
scale_size_continuous(range = c(1, 8),
breaks = c(5, 10, 15)) +
theme(
legend.position = "bottom",
legend.title = element_text(size = 11, family = "Arial"),
legend.text = element_text(size = 11, family = "Arial"),
legend.background = element_blank(),
axis.title.x = element_text(
color = "black",
size = 17,
family = "Arial"
),
axis.title.y = element_text(
color = "black",
size = 17,
family = "Arial"
),
axis.text = element_text(
color = "black",
size = 16,
family = "Arial"
),
panel.border = element_rect(
colour = "black",
fill = NA,
size = .9
),
plot.tag = element_text(
family = "Arial",
size = 18,
face = "bold"
)
) +
xlab("Longitude") +
ylab("Latitude") +
guides(color = guide_legend(override.aes = list(size = 3, alpha = 0.8), ncol = 2))
)
belowground %>%
select(TimeSinceFire_years) %>%
ggplot(aes(x = TimeSinceFire_years)) +
geom_density(fill = "blue", alpha = 0.5)
wordcloud(words = belowground$Study.Type, min.freq = 1,
max.words=200, random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = belowground$Region, min.freq = 1,
max.words=200, random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = belowground$Severity, min.freq = 1,
max.words=200, random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = belowground$CO2mic_text, min.freq = 1,
max.words=200, random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
soilCinclude <- c("kgC_per_m2", #For now, only include soils on area basis
"gC_per_m2",
"MgC_per_hectare",
"mgC_per_cm2",
"gC_per_cm2",
"kgC_per_hectare",
"mgC_per_hectare")
soilC <- belowground[,c(31,32,35,50)]
soilC$SoilC1 <- as.numeric(soilC$SoilC1)
soilC$SoilC1.1 <- as.numeric(soilC$SoilC1.1)
soilC$SoilC1_Depth_cm <- as.numeric(soilC$SoilC1_Depth_cm)
soilC <- soilC %>%
dplyr::filter(SoilC_Units %in% soilCinclude) %>%
rename(SoilC1_Control = SoilC1,
SoilC1_Burned = SoilC1.1) %>%
drop_na(SoilC1_Control, SoilC1_Burned, SoilC1_Depth_cm) %>%
mutate(rawDelta = SoilC1_Burned - SoilC1_Control)
View(soilC)
soilC$SoilC1_Delta <- mapply(convertSoilC, soilC$rawDelta, soilC$SoilC_Units, "Mg / hectare")
soilC <- soilC %>%
mutate(SoilC1_Delta2 = scale.depth(SoilC1_Delta, SoilC1_Depth_cm))
soilC %>%
ggplot(aes(x = SoilC1_Delta2)) +
geom_density() +
geom_vline(xintercept = 0, linetype = "dashed")
mean(soilC$SoilC1_Delta2)
wordcloud(words = belowground$Region, min.freq = 1,
max.words=200, random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
colnames(belowground)
wordcloud(words = belowground$Notes, min.freq = 1,
max.words=200, random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
wordcloud(words = belowground$Study.Type, min.freq = 1,
max.words=200, random.order=FALSE,
colors=brewer.pal(8, "Dark2"))
View(ui)
View(ui)
convertTreeC <- function(val, from, to) {
#We want all units to be in terms of carbon
if (grepl("C", from) == TRUE) { #If the units are already in terms of carbon, then do simple conversion
from1 <- stri_replace_all_regex(from,
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
to1 <- stri_replace_all_regex(to,
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(val, from1, to1) #Use function from measurements package for conversion
out
} else {
val1 <- val*0.45
from1 <- stri_replace_all_regex(from, #Otherwise
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
to1 <- stri_replace_all_regex(to,
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(val1, from1, to1) #Use function from measurements package for conversion
out
}
}
convertTreeC(1, "kg_per_m2", "g / m2")
convertTreeC(1, "kgC_per_m2", "g / m2")
convertTreeC(1, "kg_per_m2", "g / m2")
convertTreeC(1, "kgC_per_m2", "g / m2")
View(ui)
View(dat)
View(soilC)
#What units are given?
unique(belowground$SoilC_Units)
soilCinclude <- c("kgC_per_m2", #For now, only include soils on area basis
"gC_per_m2",
"MgC_per_hectare",
"mgC_per_cm2",
"gC_per_cm2",
"kgC_per_hectare",
"mgC_per_hectare",
"molC_per_m2")
convertSoilC(1, "molC_per_m2", "kg / hectare")
convertSoilC(1, "molC_per_m2", "g / m2")
convertSoilC(1, "mol_per_m2", "g / m2")
convertSoilC(1, "molC_per_m2", "mmol / m2")
conv_dim(x = 1, x_unit = "mol", trans = 12.01, trans_unit = "g_per_mol", y_unit = "g")
conv_dim(x = 1, x_unit = "mol", trans = 12.01, trans_unit = "g_per_mol", y_unit = "g")
conv_dim(x = 1, x_unit = "mol", trans = 12.01, trans_unit = "g_per_mol", y_unit = "g")
conv_dim(x = 1, x_unit = "umol", trans = 12.01, trans_unit = "g_per_mol", y_unit = "g")
conv_dim(x = 1, x_unit = "mol", trans = 12.01, trans_unit = "g_per_mol", y_unit = "g")
conv_dim(x = 1, x_unit = "mol", trans = 12.01, trans_unit = "g_per_mol", y_unit = "mg")
conv_dim(x = 1, x_unit = "mol", trans = 12.01, trans_unit = "g_per_mol", y_unit = "g")
conv_dim(x = 1, x_unit = "mmol", trans = 12.01, trans_unit = "g_per_mol", y_unit = "g")
conv_dim(x = 1, x_unit = "mol", trans = 12.01, trans_unit = "g_per_mol", y_unit = "g")
conv_dim(x = 1, x_unit = "mol", trans = 12.01, trans_unit = "g_per_mol", y_unit = "g")
from = "molC_per_m2"
from
grepl("molC", from)
stri_replace_all_regex(from,
pattern=c('molC', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
stri_replace_all_regex(from,
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
conv_unit(1, from = from, to = from)
conv_unit(1, from = "mol / m2", to = "mol / m2")
conv_unit(1, from = "mol / m2", to = "mmol / m2")
conv_multiunit(1, from = "mol / m2", to = "mmol / m2")
conv_multiunit(1, from = "mol / m2", to = "mol / m2")
stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
sub('.*_perP', '', from)
sub('.*_per_', '', from)
sub('*_per_', '', from)
sub('.*_per_', '', from)
from
from1 <- stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FAL
from1 <- stri_replace_all_regex(from, #First remove the C and convert to moles
from1 <- stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
from2 <- sub('.*_per_', '', from) #Snag the denominator for unit conversion
denominator <- sub('.*_per_', '', from) #Snag the denominator for unit conversion
paste0("mol_per_",denominator)
from <- "mmol_per_m2"
from1 <- stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
denominator <- sub('.*_per_', '', from) #Snag the denominator for unit conversion
val <- 1
conv_multiunit(x = val, from = from1, to = paste0("mol_per_",denominator) )
paste0("mol_per_",denominator)
paste0("mol / ",denominator)
conv_multiunit(x = val, from = from1, to = paste0("mol / ",denominator) )
stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
denominator <- sub('.*_per_', '', from) #Snag the denominator for unit conversion
stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
denominator <- sub('.*_per_', '', from) #Snag the denominator for unit conversion
sub('.*_per_', '', from) #Snag the denominator for unit conversion
conv_multiunit(x = val, from = from1, to = paste0("mol / ",denominator))
paste0("mol / ",denominator)
from <- "mmol_per_m2"
from1 <- stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
denominator <- sub('.*_per_', '', from) #Snag the denominator for unit conversion
molC <- conv_multiunit(x = val, from = from1, to = paste0("mol / ",denominator))
stri_replace_all_regex(to, #Define to units
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
to <- "Mg / hectare"
stri_replace_all_regex(to, #Define to units
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
to <- "Mg_per_hectare"
stri_replace_all_regex(to, #Define to units
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
to1 <- stri_replace_all_regex(to, #Define to units
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
conv_multiunit(gC, paste0("g / ",denominator), to1) #Use function from measurements package for conversion
from1 <- stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
denominator <- sub('.*_per_', '', from) #Snag the denominator for unit conversion
molC <- conv_multiunit(x = val, from = from1, to = paste0("mol / ",denominator)) #Convert given units to molC
gC <- molC*12.01 #C
to1 <- stri_replace_all_regex(to, #Define to units
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
to <- "g_per_hectare"
to <- "g_per_m2"
from1 <- stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
denominator <- sub('.*_per_', '', from) #Snag the denominator for unit conversion
molC <- conv_multiunit(x = val, from = from1, to = paste0("mol / ",denominator)) #Convert given units to molC
gC <- molC*12.01 #C
to1 <- stri_replace_all_regex(to, #Define to units
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
conv_multiunit(gC, paste0("g / ",denominator), to1) #Use function from measurements package for conversion
from <- "mol_per_m2"
from1 <- stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
denominator <- sub('.*_per_', '', from) #Snag the denominator for unit conversion
molC <- conv_multiunit(x = val, from = from1, to = paste0("mol / ",denominator)) #Convert given units to molC
gC <- molC*12.01 #C
to1 <- stri_replace_all_regex(to, #Define to units
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(gC, paste0("g / ",denominator), to1) #Use function from measurements package for conversion
out
from <- "C"
grepl("molC", from)
grepl("C", from)
from <- "molC"
grepl("molC", from) == TRUE)
grepl("molC", from) == TRUE
convertSoilC <- function(val, from, to) {
#We want all units to be in terms of carbon
if (grepl("molC", from) == TRUE) { #If units are in MOLES convert dimensions
print("1")
} else if (grepl("C", from) == TRUE) { #If the units are already in terms of CARBON, then do simple conversion
print("2")
}
}
convertSoilC(1, "molC", "carbon")
convertSoilC(1, "molC", "carbon")
convertSoilC(1, "C", "carbon")
convertSoilC(1, "CmolC", "carbon")
convertSoilC(1, "molC", "carbon")
convertTreeC <- function(val, from, to) {
#We want all units to be in terms of carbon
if (grepl("molC", from) == TRUE) { #If units are in MOLES convert dimensions
from1 <- stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
denominator <- sub('.*_per_', '', from) #Snag the denominator for unit conversion
molC <- conv_multiunit(x = val, from = from1, to = paste0("mol / ",denominator)) #Convert given units to molC
gC <- molC*12.01 #Convert moles of carbon to grams of carbon
to1 <- stri_replace_all_regex(to, #Define to units in correct format
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(gC, paste0("g / ",denominator), to1) #Use function from measurements package for conversion
out
} else if (grepl("C", from) == TRUE) { #If the units are already in terms of CARBON, then do simple conversion
from1 <- stri_replace_all_regex(from,
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
to1 <- stri_replace_all_regex(to,
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(val, from1, to1) #Use function from measurements package for conversion
out
} else  {
val1 <- val*0.45 #NEED TO PUT MODIFIER HERE
from1 <- stri_replace_all_regex(from, #Otherwise
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
to1 <- stri_replace_all_regex(to,
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(val1, from1, to1) #Use function from measurements package for conversion
out
}
}
convertTreeC <- function(val, from, to) {
#We want all units to be in terms of carbon
if (grepl("molC", from) == TRUE) { #If units are in MOLES convert dimensions
from1 <- stri_replace_all_regex(from, #First remove the C and convert to moles
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
denominator <- sub('.*_per_', '', from) #Snag the denominator for unit conversion
molC <- conv_multiunit(x = val, from = from1, to = paste0("mol / ",denominator)) #Convert given units to molC
gC <- molC*12.01 #Convert moles of carbon to grams of carbon
to1 <- stri_replace_all_regex(to, #Define to units in correct format
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(gC, paste0("g / ",denominator), to1) #Use function from measurements package for conversion
out
} else if (grepl("C", from) == TRUE) { #If the units are already in terms of CARBON, then do simple conversion
from1 <- stri_replace_all_regex(from,
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
to1 <- stri_replace_all_regex(to,
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(val, from1, to1) #Use function from measurements package for conversion
out
} else  {
val1 <- val*0.45 #NEED TO PUT MODIFIER HERE
from1 <- stri_replace_all_regex(from, #Otherwise
pattern=c('C', '_per_'), #Values to remove
replacement=c('', ' / '), #Values to replace with
vectorize=FALSE)
to1 <- stri_replace_all_regex(to,
pattern=c('_per_'), #Values to remove
replacement=c(' / '), #Values to replace with
vectorize=FALSE)
out <- conv_multiunit(val1, from1, to1) #Use function from measurements package for conversion
out
}
}
convertTreeC(100, "gC_per_m2", "Mg_per_hectare")
convertTreeC(100, "gC_per_m2", "g_per_m2")
convertTreeC(1, "gC_per_m2", "g_per_m2")
convertTreeC(1, "g_per_m2", "g_per_m2")
convertTreeC(1, "molC_per_m2", "g_per_m2")
install.packages("soilDB")
# Literature review datasheet metadata extraction -------------------------
#Read files, starting with row three, where actual column headers are
belowground <- read.xlsx("/Users/justinmathias/Downloads/Literature_Data_extraction_NCC_v2.xlsx",
sheet = "Belowground",
startRow = 3)
#Create UniqueID for records
belowground <- belowground %>% mutate(Unique = paste(RecordID, RecordSubID, sep = "_"))
#Create UniqueID for records
belowground <- belowground %>% mutate(Unique = paste(RecordID, RecordSubID, sep = "_"))
