#First, load all packages
library("easypackages")
install.packages("googlesheets4")
libraries(c("tidyverse", "googlesheets4"))
#Directly read file from google drive. We have a local version, too, but this will work across all users.
lit <- read_sheet("https://docs.google.com/spreadsheets/d/1pcW7V39X1VanHRCFYbMRygQJoj0SABmO/edit#gid=1557984879")
#Directly read file from google drive. We have a local version, too, but this will work across all users.
lit <- read_sheet("https://docs.google.com/spreadsheets/d/1pcW7V39X1VanHRCFYbMRygQJoj0SABmO/edit#gid=1557984879")
#First, load all packages
library("easypackages")
libraries(c("tidyverse", "googlesheets4"))
#Directly read file from google drive. We have a local version, too, but this will work across all users.
lit <- read_sheet("https://docs.google.com/spreadsheets/d/1pcW7V39X1VanHRCFYbMRygQJoj0SABmO/edit#gid=1557984879")
#Directly read file from google drive. We have a local version, too, but this will work across all users.
lit <- read_sheet("https://docs.google.com/spreadsheets/d/1pcW7V39X1VanHRCFYbMRygQJoj0SABmO/edit#gid=1557984879")
#Directly read file from google drive. We have a local version, too, but this will work across all users.
lit <- read_sheet("https://docs.google.com/spreadsheets/d/1pcW7V39X1VanHRCFYbMRygQJoj0SABmO/edit#gid=1557984879")
#First, load all packages
library("easypackages")
libraries(c("tidyverse", "googlesheets4"))
#Directly read file from google drive. We have a local version, too, but this will work across all users.
lit <- read_sheet("https://docs.google.com/spreadsheets/d/1pcW7V39X1VanHRCFYbMRygQJoj0SABmO/edit#gid=1557984879")
libraries(c("tidyverse", "googlesheets4", "openxlsx"))
#Read file, but first define useful tabs
tabs <- c("savedrecs", "Include", "Belowground")
for (i in tabs){
tabs <- read.xlsx("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/NCCFireReview/Data/LitSearch_Revised_Final_DataExtration_V1.xlsx", sheet = paste0(i))
}
View(tabs)
Include <- read.xlsx("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/NCCFireReview/Data/LitSearch_Revised_Final_DataExtration_V1.xlsx", sheet = "Include")
Belowground <- read.xlsx("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/NCCFireReview/Data/LitSearch_Revised_Final_DataExtration_V1.xlsx", sheet = "Belowground")
include <- read.xlsx("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/NCCFireReview/Data/LitSearch_Revised_Final_DataExtration_V1.xlsx", sheet = "Include")
belowground <- read.xlsx("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/NCCFireReview/Data/LitSearch_Revised_Final_DataExtration_V1.xlsx", sheet = "Belowground")
#Check out belowground structure
belowground %>% head()
#Read files
savedrecs <- read.xlsx("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/NCCFireReview/Data/LitSearch_Revised_Final_DataExtration_V1.xlsx", sheet = "savedrecs")
libraries(c("tidyverse", "googlesheets4", "openxlsx"))
#First, load all packages
library("easypackages")
libraries(c("tidyverse", "googlesheets4", "openxlsx"))
install_packages("tidyverse")
install_package("googlesheets4")
install.packages("googlesheets4")
install.packages("openxlsx")
install.packages("isocalcR")
#####################Created on 9/26/2022 by Justin Mathias#####################
##This script will serve as a central hub for commonly utilized functions for ##
##the NCC Fire Review.
#First, load all packages
library("easypackages")
libraries(c("tidyverse", "googlesheets4", "openxlsx"))
#Read files
savedrecs <- read.xlsx("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/NCCFireReview/Data/LitSearch_Revised_Final_DataExtration_V1.xlsx", sheet = "savedrecs")
include <- read.xlsx("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/NCCFireReview/Data/LitSearch_Revised_Final_DataExtration_V1.xlsx", sheet = "Include")
belowground <- read.xlsx("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/NCCFireReview/Data/LitSearch_Revised_Final_DataExtration_V1.xlsx", sheet = "Belowground")
#Check out belowground structure
belowground %>% head()
#Read files
belowground <- read.xlsx("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/NCCFireReview/Data/LitSearch_Revised_Final_DataExtration_V1.xlsx",
sheet = "Belowground",
startRow = 3)
#Check out belowground structure
belowground %>% head()
#Check out belowground structure
belowground
colnames(belowground)
#Let's first tackel Lat/Lon
belowground$`Lat/Lon` |> head
#Let's first tackel Lat/Lon
belowground$`Lat/Lon` |> head()
#Let's first tackel Lat/Lon
belowground$`Lat/Lon` |> head()
#Let's first tackle Lat/Lon
belowground$`Lat/Lon`
#Let's first tackle Lat/Lon
read_sheet("https://docs.google.com/spreadsheets/d/1pcW7V39X1VanHRCFYbMRygQJoj0SABmO/edit#gid=1557984879")
`rlang::last_error()`
rlang::last_error()
5
#Let's first tackle Lat/Lon
read_sheet("https://docs.google.com/spreadsheets/d/1pcW7V39X1VanHRCFYbMRygQJoj0SABmO/edit#gid=1557984879")
#First, load all packages
library("easypackages")
libraries(c("tidyverse", "googlesheets4", "openxlsx"))
#Let's first tackle Lat/Lon
read_sheet("https://docs.google.com/spreadsheets/d/1pcW7V39X1VanHRCFYbMRygQJoj0SABmO/edit#gid=1557984879", sheet = "Belowground")
#Check out belowground structure
colnames(belowground)
#####################Created on 9/26/2022 by Justin Mathias#####################
##This script will serve as a central hub for commonly utilized functions for ##
##the NCC Fire Review.
#First, load all packages
library("easypackages")
libraries(c("tidyverse", "googlesheets4", "openxlsx"))
#Read files, starting with row three, where actual
belowground <- read.xlsx("/Users/justinmathias/Dropbox/Research/UIdaho Postdoc/NCCFireReview/Data/LitSearch_Revised_Final_DataExtration_V1.xlsx",
sheet = "Belowground",
startRow = 3)
#Check out belowground structure
colnames(belowground)
libraries(c("tidyverse", "googlesheets4", "openxlsx", "measurements"))
install.packages("measurements")
#First, load all packages
library("easypackages")
libraries(c("tidyverse", "googlesheets4", "openxlsx", "measurements"))
#Check out belowground structure
colnames(belowground)
dd <- "dec_deg"
dd
dms <- "deg_min_sec"
dd <- "dec_deg"
dms <- "deg_min_sec"
#First, load all packages
library("easypackages")
libraries(c("tidyverse", "openxlsx", "measurements"))
#Let's start by creating
dms.to.dd <- function(comment(dms)<-c("This is a binary variable")){
dms <- "x"
comment(dms)<-c("This is a binary variable")
dms
#Let's start by creating
dms.to.dd <- function( comment(dms)<-c("This is a binary variable") ){
#Let's start by creating functions that we will then wrap into a single function for working with lat/lon
dms.to.dd <- function(dms){
dd <- conv_unit(dms, from = "deg_min_sec", to = "dec_deg")
}
coord.convert <- function(coord, fn){
if(fn == "dms.to.dd"){
dms.to.dd(coord)
}
}
coord.convert("21 35 45", "dms.to.dd")
coord.convert <- function(coord, fn){
if(fn == "dms.to.dd"){
return(dms.to.dd(coord))
}
}
coord.convert("21 35 45", "dms.to.dd")
coord.convert <- function(coord, fn){
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(dd)
}
}
coord.convert("21 35 45", "dms.to.dd")
}
coord.convert("21 35 45", "dms.to.dd")
coord.convert <- function(coord, fn){
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(dd, 6))
}
}
coord.convert("21 35 45", "dms.to.dd")
coord.convert <- function(coord, fn){
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
}
}
coord.convert("21 35 45", "dms.to.dd")
dd <- conv_unit(dms, from = "deg_min_sec", to = "dec_deg")}
#Let's start by creating functions that we will then wrap into a single function for working with lat/lon
dms.to.dd <- function(dms){dd <- conv_unit(dms, from = "deg_min_sec", to = "dec_deg")}
#Let's start by creating functions that we will then wrap into a single function for working with lat/lon
dms.to.dd <- function(dms)
{dd <- conv_unit(dms, from = "deg_min_sec", to = "dec_deg")}
#Let's start by creating functions that we will then wrap into a single function for working with lat/lon
dms.to.dd <- function(dms) {
dd <- conv_unit(dms, from = "deg_min_sec", to = "dec_deg")
}
coord.convert <- function(coord, fn){
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else {
if(fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
}
dd.to.dms <- function(dd) {
dms <- conv_unit(dd, from = "dec_deg", to "deg_min_sec")
dd.to.dms <- function(dd) {
dms <- conv_unit(dd, from = "dec_deg", to = "deg_min_sec")
}
coord.convert <- function(coord, fn){
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else {
if(fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
}
coord.convert("21 35 45", "dms.to.dd")
coord.convert(22.4, "dd.to.dms")
coord.convert(22.491, "dd.to.dms")
coord.convert <- function(coord, fn){
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if {
coord.convert <- function(coord, fn){
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} elseif {
}
coord.convert <- function(coord, fn){
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms")
if(fn !%in% fns){
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms")
if(!fn %in% fns){
warning("Function specified not in list!")
}
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
coord.convert(23.4455, "dd.to.dms")
coord.convert(23.4455, "dd.to.ds")
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms")
if(!fn %in% fns){
stop("Function specified not in list!")
}
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
coord.convert(23.4455, "dd.to.ds")
fns <- c("dms.to.dd", "dd.to.dms")
paste0("Specified function must be one of", fns,"!")
paste0("Specified function must be one of ", fns,"!")
paste0("Specified function must be one of:", paste0(fns),"!"))
paste0("Specified function must be one of:", paste0(fns),"!")
paste0("Specified function must be one of:", fns,"!")
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms")
if(!fn %in% fns){
stop(paste0("Specified function must be one of:"), fns)
}
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
coord.convert(23.4455, "dd.to.ds")
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms")
if(!fn %in% fns){
stop(paste0("Specified function must be one of:/"), fns)
}
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
coord.convert(23.4455, "dd.to.ds")
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms")
if(!fn %in% fns){
stop(paste0("Specified function must be one of:/n"), fns)
}
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
coord.convert(23.4455, "dd.to.ds")
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms")
if(!fn %in% fns){
stop(paste0("Specified function must be one of:\n"), fns)
}
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
coord.convert(23.4455, "dd.to.ds")
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms")
if(!fn %in% fns){
stop(paste0("Specified function must be one of:\n"), paste0(fns))
}
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
coord.convert(23.4455, "dd.to.ds")
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms")
if(!fn %in% fns){
stop(paste0("Specified function must be one of:\n"), paste(fns, " "))
}
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
coord.convert(23.4455, "dd.to.ds")
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms")
if(!fn %in% fns){
stop(paste0("Specified function must be one of:\n"), paste(fns, ", "))
}
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
coord.convert(23.4455, "dd.to.ds")
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms")
if(!fn %in% fns){
stop(paste0("Specified function must be one of:\n"), paste(fns, " "))
}
if(fn == "dms.to.dd"){
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") {
dms <- dd.to.dms(coord)
return(dms)
}
}
coord.convert(23.4455, "dd.to.ds")
#Tests
coord.convert(22.491, "dd.to.dms")
#Tests
coord.convert("21 35 45", "dms.to.dd")
coord.convert("21 35 45", "dm.to.dd")
coord.convert <- function(coord, fn){
fns <- c("dms.to.dd", "dd.to.dms") #First list all possible functions
if(!fn %in% fns){
stop(paste0("Specified function must be one of:\n"), paste(fns, " ")) #Write error message if fn isn't listed
}
if(fn == "dms.to.dd"){ #Function for dms to dd
dd <- dms.to.dd(coord)
return(round(as.numeric(dd), 6))
} else if (fn == "dd.to.dms") { #Function for dd to dms
dms <- dd.to.dms(coord)
return(dms)
}
}
#Tests
coord.convert("21 35 45", "dms.to.dd")
coord.convert("21 35 45", "dm.to.dd") #Should throw an error
